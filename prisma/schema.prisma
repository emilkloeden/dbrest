generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider  = "zod-prisma-types"
  output    = "../src/generated/zod"
  camelCase = "true"
}

datasource db {
  provider = "sqlite"
  url      = "file:/home/emil/ai/dbrest/db/example.db"
}

model CourseInstructors {
  id Int          @id @default(autoincrement())
  courseId Int? @map("course_id")
  instructorId Int? @map("instructor_id")
  instructors Instructors? @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  courses Courses?     @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@map("course_instructors")
}

model Courses {
  id Int                  @id @default(autoincrement())
  departmentId Int? @map("department_id")
  code String
  name String
  description String?
  credits Int?
  courseInstructors CourseInstructors[]
  departments Departments?         @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  enrollments Enrollments[]
  @@map("courses")
}

model Departments {
  id Int           @id @default(autoincrement())
  name String
  description String?
  courses Courses[]
  instructors Instructors[]
  @@map("departments")
}

model Enrollments {
  id Int       @id @default(autoincrement())
  studentId Int? @map("student_id")
  courseId Int? @map("course_id")
  enrollmentDate String? @map("enrollment_date") /// @zod-coerce(date)
  grade String?
  courses Courses?  @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  students Students? @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@map("enrollments")
}

model Instructors {
  id Int                  @id @default(autoincrement())
  firstName String @map("first_name")
  lastName String @map("last_name")
  email String               @unique(map: "sqlite_autoindex_instructors_1")
  departmentId Int? @map("department_id")
  courseInstructors CourseInstructors[]
  departments Departments?         @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@map("instructors")
}

model Students {
  id Int           @id @default(autoincrement())
  firstName String @map("first_name")
  lastName String @map("last_name")
  email String        @unique(map: "sqlite_autoindex_students_1")
  dateOfBirth String? @map("date_of_birth") /// @zod-coerce(date)
  enrollmentDate String? @map("enrollment_date") /// @zod-coerce(date)
  enrollments Enrollments[]
  @@map("students")
}
